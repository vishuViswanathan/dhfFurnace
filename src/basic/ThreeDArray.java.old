package basic;
import java.util.*;
import java.io.*;
import java.text.*;
import javax.swing.*;

public class ThreeDArray extends Object implements Serializable{

  int xSize, ySize, zSize;
  OneNode nodes[][][];
  Vector boundaries = new Vector();
  Boundary[] boundariesArray = null;
  boolean boundariesDirty = true;

  public ThreeDArray(int xSize, int ySize, int zSize) {
    setSize(xSize, ySize, zSize);
  }

  protected ThreeDArray() {
  }

  protected void setSize(int xSize, int ySize, int zSize) {
    if (xSize < 1) xSize = 1;
    if (ySize < 1) ySize = 1;
    if (zSize < 1) zSize = 1;
    this.xSize = xSize;
    this.ySize = ySize;
    this.zSize = zSize;
    nodes = new OneNode[xSize][ySize][zSize];
// DEBUG
    debug("Nodes = " + xSize + ", " + ySize + ", " + zSize);

  }

  public boolean add(OneNode node, int atX, int atY, int atZ) {
    if (nodes[atX][atY][atZ] != null)
      return false;
    replace(node, atX, atY, atZ);
    return true;
  }

  OneNode getNodeAt(int atX, int atY, int atZ) {
    return nodes[atX][atY][atZ];
  }

  /**
   * uncondtional add to location
   */
  public void replace(OneNode node, int atX, int atY, int atZ) {
    nodes[atX][atY][atZ] = node;
    OneNode neighbour;
    if (!checkIndexes(atX, atY, atZ)) {
/*
    if (atX < 0 || atX > (xSize - 1) ||
        atY < 0 || atY > (ySize - 1) ||
        atZ < 0 || atZ > (zSize - 1)) {
        errMessage("Out of range (atX = " + atX +
                    " (atY = " + atY +
                    " (atZ = " + atZ);
*/
        return;
    }

    Boundary boundary = null;

    if (atX > 0) {
      neighbour = nodes[atX - 1][atY][atZ];
      if (neighbour != null) {
        if (neighbour.getBoundary(OneNode.LEFT) == null) {
          boundary =
              new Boundary(neighbour, node, Boundary.YZ);
          neighbour.noteBoundary(boundary, OneNode.RIGHT);
          node.noteBoundary(boundary, OneNode.LEFT);
          boundaries.addElement(boundary);
        }
      }
    }
    if (atX < xSize - 1) {
      neighbour = nodes[atX + 1][atY][atZ];
      if (neighbour != null) {
        if (neighbour.getBoundary(OneNode.RIGHT) == null) {
          boundary =
              new Boundary(node, neighbour, Boundary.YZ);
          neighbour.noteBoundary(boundary, OneNode.LEFT);
          node.noteBoundary(boundary, OneNode.RIGHT);
          boundaries.addElement(boundary);
        }
      }
    }

   if (atY > 0) {
      neighbour = nodes[atX][atY - 1][atZ];
      if (neighbour != null) {
        if (neighbour.getBoundary(OneNode.FRONT) == null) {
          boundary =
              new Boundary(neighbour, node, Boundary.ZX);
          neighbour.noteBoundary(boundary, OneNode.FRONT);
          node.noteBoundary(boundary, OneNode.BACK);
          boundaries.addElement(boundary);
        }
      }
    }
    if (atY < ySize - 1) {
      neighbour = nodes[atX][atY + 1][atZ];
      if (neighbour != null) {
        if (neighbour.getBoundary(OneNode.BACK) == null) {
          boundary =
              new Boundary(node, neighbour, Boundary.ZX);
          neighbour.noteBoundary(boundary, OneNode.BACK);
          node.noteBoundary(boundary, OneNode.FRONT);
          boundaries.addElement(boundary);
        }
      }
    }

   if (atZ > 0) {
      neighbour = nodes[atX][atY][atZ - 1];
      if (neighbour != null) {
        if (neighbour.getBoundary(OneNode.BELOW) == null) {
          boundary =
              new Boundary(neighbour, node, Boundary.XY);
          neighbour.noteBoundary(boundary, OneNode.ABOVE);
          node.noteBoundary(boundary, OneNode.BELOW);
          boundaries.addElement(boundary);
        }
      }
    }

    if (atZ < zSize - 1) {
      neighbour = nodes[atX][atY][atZ + 1];
      if (neighbour != null) {
        if (neighbour.getBoundary(OneNode.ABOVE) == null) {
          boundary =
              new Boundary(node, neighbour, Boundary.XY);
          neighbour.noteBoundary(boundary, OneNode.BELOW);
          node.noteBoundary(boundary, OneNode.ABOVE);
          boundaries.addElement(boundary);
        }
      }
    }
  }

  boolean checkIndexes(int x, int y, int z) {
    if (x < 0 || x > (xSize - 1) ||
        y < 0 || y > (ySize - 1) ||
        z < 0 || z > (zSize - 1)) {
        errMessage("Out of range (x = " + x +
                    " (y = " + y +
                    " (z = " + z);
        return false;
    }
    return true;
  }


  public void setTemperatureAt(double temperature,
              int x, int y, int z) {
    if (checkIndexes(x, y, z)) {
      nodes[x][y][z].setTemperature(temperature);
    }
  }

  public void setHeatTrCoeff(double heatTrCoeff,
              int x, int y, int z) {
    if (checkIndexes(x, y, z)) {
      nodes[x][y][z].setHeatTfCoeff(heatTrCoeff);
    }
  }

//  void resetBoundaries() {
//    if (boundariesArray == null)
//      boundariesArray = (Boundary[])boundaries.toArray(new Boundary[0]);
//    int size = boundariesArray.length;
//    for (int n = 0; n < size; n++) {
//      boundariesArray[n].reset();
//    }
//  }

  void calculateBoundaries() {
    if (boundariesArray == null)
      boundariesArray = (Boundary[])boundaries.toArray(new Boundary[0]);

    int size = boundariesArray.length;
// DEBUG
    debug("boundarArray Length = " + size);
    for (int n = 0; n < size; n++) {
      boundariesArray[n].update();
    }
    boundariesDirty = false;
  }

  boolean updateNodes(double deltaTime) {
    if (boundariesDirty) {
      errMessage("boundaries NOT updated!");
      return false;
    }
    else {
      for (int x = 0; x < xSize; x++) {
        for (int y = 0; y < ySize; y++) {
          for (int z = 0; z < zSize; z++) {
            nodes[x][y][z].update(deltaTime);
          }
        }
      }
      boundariesDirty = false;
      // swap new temp to now
      for (int x = 0; x < xSize; x++) {
        for (int y = 0; y < ySize; y++) {
          for (int z = 0; z < zSize; z++) {
            nodes[x][y][z].resetTemperature();
          }
        }
      }
    }
    return true;
  }

  public boolean update(double deltaTime) {
//    resetBoundaries();
    calculateBoundaries();
    return updateNodes(deltaTime);
  }

  void displayXYplane(int atZ) {
    if (atZ >= 0 && atZ < zSize) {
      debug("XY plane at z = " + atZ);
      String oneRow = "";
      for (int x = 0; x < xSize; x++)
        oneRow += "\t" + x;
      debug(oneRow);
      for (int y = 0; y < ySize; y++) {
        oneRow = "" + y;
        for (int x = 0; x < xSize; x++) {
          oneRow +=
            "\t" + new Double(nodes[x][y][atZ].getTemperature()).intValue();
        }
        debug(oneRow);
      }
    }
  }

  public int getXsize() {
    return xSize;
  }

  public int getYsize() {
    return ySize;
  }

  public int getZsize() {
    return zSize;
  }

  public double getDataAt(int x, int y, int z) {
    double retVal;
    try {
      retVal = nodes[x][y][z].getTemperature();
    }
    catch (Exception aoe) {
      errMessage("getDataAt: " + aoe);
      errMessage("Call from ThreeDArray, x = " + x + ", y = " +y + ",z = " + z);
      retVal = -1.0;
    }
    return retVal;
  }


  public boolean writeToDataFile(String fileName) {
    int x = -1, y = -1, z = -1;
    try {
      OutputStream out =
        new FileOutputStream(fileName);
      ObjectOutputStream oos = new ObjectOutputStream(out);
      oos.writeInt(xSize);
      oos.writeInt(ySize);
      oos.writeInt(zSize);
      for (x = 0; x < xSize; x++)
        for (y = 0; y < ySize; y++)
          for (z = 0; z < zSize; z++)
            oos.writeDouble(nodes[x][y][z].getTemperature());
      oos.flush();
      out.close();
    }
    catch (IOException ioe) {
      errMessage("writeToDataFile: " + ioe);
      return false;
    }
    return true;

  }

  public double[][][] getDataArray() {
    double[][][] dataArray = new double[xSize][ySize][zSize];
    for (int x = 0; x < xSize; x++) {
      for (int y = 0; y < ySize; y++) {
        for (int z = 0; z < zSize; z++) {
          dataArray[x][y][z] =
              nodes[x][y][z].getTemperature();
        }
      }
    }
    return dataArray;
  }


  public double[][][] getDataArray(String fileName) {
    double[][][] tempData = null;
    int x = -1, y = -1, z = -1;
    try {
      InputStream in =
        new FileInputStream(fileName);
      ObjectInputStream ois = new ObjectInputStream(in);
      int xMax = ois.readInt();
      int yMax = ois.readInt();
      int zMax = ois.readInt();
      tempData = new double[xMax][yMax][zMax];
      for (x = 0; x < xMax; x++)
        for (y = 0; y < yMax; y++)
          for (z = 0; z < zMax; z++)
            tempData[x][y][z] = ois.readDouble();
      in.close();
    }
    catch (IOException ioe) {
      errMessage("getDataArray: " + ioe + " at " + x + ", " + y + ", " + z);
      ioe.printStackTrace();
      return null;
    }
    return tempData;
  }

  public boolean writeArrayToFile(String fileName, boolean append) {
    try {
      OutputStream out =
        new FileOutputStream(fileName, append);
      for (int z = 0; z < zSize; z++) {
         writeOneXYplaneToFile(out, z);
      }
      for (int y = 0; y < ySize; y++) {
         writeOneXZplaneToFile(out, y);
      }
      for (int x = 0; x < xSize; x++) {
         writeOneYZplaneToFile(out, x);
      }
      out.close();
      return true;
    }
    catch (IOException ioe) {
      errMessage("writeTempProfileFile: " + ioe);
      return false;
    }
  }


  void writeOneXYplaneToFile(String fileName, int atZ, boolean append) {
    try {
      OutputStream out =
        new FileOutputStream(fileName, append);
      writeOneXYplaneToFile(out, atZ);
      out.close();
    }
    catch (IOException ioe) {
      errMessage("writeOneXYplaneToFile: " + ioe);
    }
  }

  void writeOneXZplaneToFile(String fileName, int atY, boolean append) {
    try {
      OutputStream out =
        new FileOutputStream(fileName, append);
      writeOneXZplaneToFile(out, atY);
      out.close();
    }
    catch (IOException ioe) {
      errMessage("writeOneXZplaneToFile: " + ioe);
    }
  }

  void writeOneYZplaneToFile(String fileName, int atX, boolean append) {
    try {
      OutputStream out =
        new FileOutputStream(fileName, append);
      writeOneYZplaneToFile(out, atX);
      out.close();
    }
    catch (IOException ioe) {
      errMessage("writeOneYZplaneToFile: " + ioe);
    }
  }

  DecimalFormat formatTemp = new DecimalFormat(" 0000");
  DecimalFormat formatPos = new DecimalFormat("  000");

  void writeOneXYplaneToFile(OutputStream out, int atZ) {
    PrintWriter writer = new PrintWriter(out);
    if (atZ >= 0 && atZ < zSize) {
      writer.println("XY plane at z = " + atZ);
      String oneRow = "     ";
      for (int x = 0; x < xSize; x++)
        oneRow += formatPos.format(x);
      writer.println(oneRow);
      for (int y = ySize - 1; y >= 0; y--) {
        oneRow = formatPos.format(y);
        for (int x = 0; x < xSize; x++) {
          oneRow +=
            formatTemp.format(new Double(nodes[x][y][atZ].getTemperature()).intValue());
        }
        writer.println(oneRow);
        writer.flush();
      }
    }
  }

  void writeOneXZplaneToFile(OutputStream out, int atY) {
    PrintWriter writer = new PrintWriter(out);
    if (atY >= 0 && atY < ySize) {
      writer.println("XZ plane at y = " + atY);
      String oneRow = "     ";
      for (int x = 0; x < xSize; x++)
        oneRow += formatPos.format(x);
      writer.println(oneRow);
      for (int z = zSize - 1; z >= 0; z--) {
        oneRow = formatPos.format(z);
        for (int x = 0; x < xSize; x++) {
          oneRow +=
            formatTemp.format(new Double(nodes[x][atY][z].getTemperature()).intValue());
        }
        writer.println(oneRow);
        writer.flush();
      }
    }
  }

  void writeOneYZplaneToFile(OutputStream out, int atX) {
    PrintWriter writer = new PrintWriter(out);
    if (atX >= 0 && atX < xSize) {
      writer.println("YZ plane at x = " + atX);
      String oneRow = "     ";
      for (int y = ySize - 1; y >= 0; y--)
        oneRow += formatPos.format(y);
      writer.println(oneRow);
      for (int z = zSize - 1; z >= 0; z--) {
        oneRow = formatPos.format(z);
        for (int y = ySize - 1; y >=0; y--) {
          oneRow +=
            formatTemp.format(new Double(nodes[atX][y][z].getTemperature()).intValue());
        }
        writer.println(oneRow);
        writer.flush();
      }
    }
  }

  void errMessage(String msg) {
    JOptionPane.showMessageDialog(null, msg, "ThreeDArray",
                JOptionPane.ERROR_MESSAGE);
  }

  void debug(String msg) {
    System.out.println("ThreeDArray: " + msg);
  }

}

